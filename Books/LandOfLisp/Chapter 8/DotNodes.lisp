(defparameter *wizard-nodes* '((living-room (you are in the living-room.
					     a wizard is snoring loudly on the couch.))
			       (garden (you are in a beautiful garden.
					there is a well in front of you.))
			       (attic (you are in the attic. there
				       is a giant welding torch in the corner.))))

(defparameter *wizard-edges* '((living-room (garden west door)
				(attic upstairs ladder))
			       (garden (living-room east door))
			       (attic (living-room downstairs ladder))))

(defparameter *max-label-length* 30)

(defun dot-name (exp)
  (substitute-if #\_ (complement #'alphanumericp) (prin1-to-string exp)))


(defun dot-label (exp)
  (if exp
      (let ((s (write-to-string exp :pretty nil)))
	(if (> (length s) *max-label-length*)
	    (concatenate 'string (subseq s 0 (- *max-label-length* 3)) "...")
	    s))
      ""))

(defun nodes->dot (nodes)
  (mapc (lambda (node)
	  (fresh-line)
	  (princ "  ")
	  (princ (dot-name (car node)))
	  (princ "[label=\"")
	  (princ (dot-label node))	
	  (princ "\"];"))
	nodes))

(defun edges->dot (edges)
  (mapc (lambda (node)
	  (mapc (lambda (edge)
		  (fresh-line)
		  (princ "  ")
		  (princ (dot-name (car node)))
		  (princ "->")
		  (princ (dot-name (car edge)))
		  (princ "[label=\"")
		  (princ (dot-label (cdr edge)))
		  (princ "\"];"))
		(cdr node)))
	edges))


(defun graph->dot (nodes edges)
  (princ "digraph{")
  (nodes->dot nodes)
  (edges->dot edges)
  (fresh-line)
  (Princ "}"))

(defun dot->png (filespec thunk)
  "Save DOT information generated by a thunk on a *STANDARD-OUTPUT* to a FILESPEC file. Then use FILESPEC to create a corresponding png picture of a graph."
  ;; dump DOT file first
  (let ((*default-pathname-defaults*
	 (make-pathname :directory (pathname-directory (pathname filespec)))))
    ;; (format t "pwd (curr working dir): ~A~%" *default-pathname-defaults*)
    (with-open-file (*standard-output* 
		     filespec
		     :direction :output
		     :if-exists :supersede)
      (funcall thunk))
    #+sbcl
    (sb-ext:run-program "/bin/sh" 
			(list "-c" (concatenate 'string "dot -Tpng -O " filespec))
			:input nil
			:output *standard-output*)
    #+clozure
    (ccl:run-program "/bin/sh" 
		     (list "-c" (concatenate 'string "dot -Tpng -O" filespec))
		     :input nil
		     :output *standard-output*)))

(defun graph->png (fname nodes edges)
  (dot->png fname
	    (lambda ()
	      (graph->dot nodes edges))))

(defun uedges->dot (edges)
  (maplist (lambda (lst)
	     (mapc (lambda (edge)
		     (unless (assoc (car edge) (cdr lst))
		       (fresh-line)
		       (princ (dot-name (caar lst)))
		       (princ "--")
		       (princ (dot-name (car edge)))
		       (princ "[label=\"")
		       (princ (dot-label (cdr edge)))
		       (princ "\"];")))
		   (cdar lst)))
	   edges))

(defun ugraph->dot (nodes edges)
  (princ "graph{")
  (nodes->dot nodes)
  (uedges->dot edges)
  (princ "}"))

(defun ugraph->png (fname nodes edges)
  (dot->png fname
	    (lambda ()
	      (ugraph->dot nodes edges))))

;; Testing--------------------------------------------------
;; (dot-name 'living-room)

;; (subseq "1233241111111111111111114546" 0 27)

;; (nodes->dot *wizard-edges*)

;; (edges->dot *wizard-edges*)

;; (graph->dot *wizard-nodes* *wizard-edges*)

;; (with-open-file (my-stream
;; 		 "testfile.txt"
;; 		 :direction :output
;; 		 :if-exists :supersede)
;;   (princ "Hello File!" my-stream)
;;   (fresh-line my-stream)
;;   (format my-stream "  ] {}"))

;; (graph->png "wizard.dot" *wizard-nodes* *wizard-edges*)

(ugraph->png "uwizard.dot" *wizard-nodes* *wizard-edges*)

;; (mapcar #'princ *wizard-nodes*)
