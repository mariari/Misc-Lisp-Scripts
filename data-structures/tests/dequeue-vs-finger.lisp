

(time (defparameter *y* (add-seqr (list:range 20) (make-dequeue))))

(time (defparameter *x* (to-finger (list:range 20))))


(time
 (let ((swap1 *y*)
       (swap2 *y*))
   (reduce (lambda (acc ele)
             (declare (ignore ele))
             (let ((rand (random 11)))
               (cond ((= 7 rand) (setf swap1 acc) (cdrr acc))
                     ((= 6 rand) (setf swap2 acc) (cdrl acc))
                     ((= 5 rand) (cdrr swap1))
                     ((= 4 rand) (cdrl swap2))
                     ((= 3 rand) (cdrr acc))
                     ((= 2 rand) (cdrl acc))
                     ((= 10 rand)(consr 0 acc))
                     ((= 9 rand) (consr 0 acc))
                     ((= 8 rand) (consl 0 acc))
                     ((= 1 rand) (consr 0 acc))
                     ((= 0 rand) (consl 0 acc)))))
           (vector:range 50000)
           :initial-value *y*)))

(time (let ((swap1 *x*)
            (swap2 *x*))
        (reduce (lambda (acc ele)
                  (declare (ignore ele))
                  (let ((rand (random 11)))
                    (cond ((= 7 rand) (setf swap1 acc) (view-tree-l (view-r acc)))
                          ((= 6 rand) (setf swap2 acc) (view-tree-l (view-l acc)))
                          ((= 5 rand) (view-tree-l (view-r swap1)))
                          ((= 4 rand) (view-tree-l (view-l swap2)))
                          ((= 3 rand) (view-tree-l (view-r acc)))
                          ((= 2 rand) (view-tree-l (view-l acc)))
                          ((= 1 rand) (cons-r 0 acc))
                          ((= 10 rand) (cons-r 0 acc))
                          ((= 9 rand) (cons-r 0 acc))
                          ((= 8 rand) (cons-l 0 acc))
                          ((= 0 rand) (cons-l 0 acc)))))
                (vector:range 50000)
                :initial-value *x*)))

(time (let ((half-way))
        (reduce (lambda (acc ele)
                  (if (= ele 500)
                      (setf half-way acc)
                      (cdrr acc)))
                (vector:range 5000)
                :initial-value *y*)
        ;; (reduce (lambda (acc ele)
        ;;           (declare (ignore ele))
        ;;           (cdrr acc))
        ;;         (f:range-v 5000)
        ;;         :initial-value *y*)
        (reduce (lambda (acc ele)
                  (declare (ignore ele))
                  (cdrl acc))
                (vector:range 5000)
                :initial-value *y*)))

(time (let ((half-way))
        (reduce (lambda (acc ele)
                  (if (= ele 500)
                      (setf half-way acc)
                      (view-tree-l (view-r acc))))
                (vector:range 5000)
                :initial-value *x*)
        ;; (reduce (lambda (acc ele)
        ;;           (declare (ignore ele))
        ;;           (view-tree-l (view-l acc)))
        ;;         (f:range-v 5000)
        ;;         :initial-value *x*)
        (reduce (lambda (acc ele)
                  (declare (ignore ele))
                  (view-tree-l (view-l acc)))
                (vector:range 5000)
                :initial-value *x*)))



