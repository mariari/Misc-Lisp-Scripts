* Yaml Generator

- Note This code has likely bit rotted, as it's setup for a specific
  project, however the guts of the system still work well, thus can be
  used for other's Haskell projects.
  + Currently =(main)= will error due to files being missing, but all
    of the issues present are easy to fix.
  + View =config.lisp= as an example configuration for one's project

Hello, Welcome to the Project =Stack.yaml= generator.

This library was designed to generate =Stack.yaml= files. This need
arises out of having 11 libraries that need to be updated often
causing delays when adding new dependencies.

The configuration that we use is in =src/config=

Inside the =config= file the libraries themselves are at the bottom in
the section

#+begin_src lisp
  ;;; ----------------------------------------------------------------------
  ;;; stack-yaml for the YAML generation
  ;;; ----------------------------------------------------------------------
#+end_src

You can jump to this section in =config= to edit them directly!

Note that for the =main= function to work, one has to load their repl
in the project directory itself.

** Dependencies
- Only a CL compiler and [[https://common-lisp.net/project/asdf/][ASDF]] is needed to run the base generation
- For the GUΙ visualizer you will need
  + _[[https://www.quicklisp.org/beta/][Quick Lisp]]_
    * [[https://common-lisp.net/project/fset/Site/FSet-Tutorial.html][=fset=]]
    * [[https://common-lisp.net/project/mcclim/][=mcclim=]]
    * =clim=
  + These can be grabbed by running =(ql:quickload
    :yaml-generator-gui)= after quick-lisp is installed

** Launching the GUI
- to better visualize how our packages depend on each other one can
  run a GUI visualizer which has some features.
- One can run the GUI by loading =yaml-generator.asd= by:
  + =sbcl --load yaml-generator.asdf=
- Then the following piece of code to load up the gui
  #+begin_src lisp
    ;; You need to run this once for the package installs
    (ql:quickload :yaml-generator-gui)
    ;; can just run this from now on
    (launch-gui)
  #+end_src
** GUI commands and interaction
- At this point one should be looking at the full dependency graph of
  the package of Project
- You can move nodes around by left clicking and moving them any way
  you like!
- You can zoom in on a specific package by right clicking and pressing
  =Focus= on the command prompt. At this point press space or
  enter. You can now select the package you want by clicking on it.
  + If you pressed enter instead of space, then you'll need to press
    the OK button
  + If you pressed space you just have to press enter as the command
    is now fully applied!
- You could also launch this by typing =f= =<sapce>= or =f=
  =<tab>=. All commands are either on the right click menu or typeable!
- If you want to reset your view on Project, then you can right click,
  then click on reset then press space
  + You could alternatively press =r= =<space>= or =r= =<tab>=
    =<space>= which will invoke the same command.
- This is the current extent of the GUI!

** Editing Dependencies
Whenever one comes across a new dependency, they may need to edit
=config=, here are all the forms that one may run into

#+begin_src yaml
# ①
 - git: https://gitlab.com/morley-framework/morley.git
   commit: 53961f48d0d3fb61051fceaa6c9ed6becb7511e5
   subdirs:
    - code/morley
    - code/morley-prelude

# ②
- constraints-extras-0.3.0.2@sha256:bf6884be65958e9188ae3c9e5547abfd6d201df021bff8a4704c2c4fe1e1ae5b,1784

# ③
- cryptonite-0.27

# ④
- github: phile314/tasty-silver
  commit: f1f90ac3113cd445e2a7ade43ebb29f0db38ab9b


#+end_src


These forms correspond to the following

#+begin_src lisp
  ;; ①

  ;; Defparamter is given to show how we define the variables
  (defparameter *tezos-morley*
    (make-dependency-git :name "https://gitlab.com/morley-framework/morley.git"
                         :commit "53961f48d0d3fb61051fceaa6c9ed6becb7511e5"
                         :subdirs (list "code/morley" "code/morley-prelude")))

  ;; ②

  (string->dep-sha
   "constraints-extras-0.3.0.2@sha256:bf6884be65958e9188ae3c9e5547abfd6d201df021bff8a4704c2c4fe1e1ae5b,1784")

  ;; ③
  (make-dependency-bare :name "cryptonite-0.27")

  ;; ④
  (make-dependency-github
   :name "phile314/tasty-silver"
   :commit "f1f90ac3113cd445e2a7ade43ebb29f0db38ab9b")

#+end_src

We also have a notion of groups, which allow us to group many
dependencies together with a comment which explains the reasoning for
their inclusion into the dependency file.

#+begin_src lisp
  (defparameter *morley-deps*
    ;; Make the dependency group
    (make-groups
     ;; Write a header section on the dependency
     :comment "Morley Specific dependencies"
     ;; Now list all dependencies
     :deps (list
            ,*tezos-bake-monitor*
            ,*tezos-morley*)))

#+end_src
** Making your own library
If we make a new dependency, or you need to edit your own you can do
so. The structure looks like the following.
#+begin_src lisp
  (defparameter *interaction-net-IR*
    ;; make a stack.yaml configuration
    (make-stack-yaml
     ;; give it a name for other packages, this corresponds to the path name
     :name       "InteractionNetIR"
     ;; this resolver number states we aren't using the default *default-resolver*
     :resolver   17.9
     ;; packages are local packages we rely on in our repo, update this
     ;; if you want to rely on another project package!
     :packages   (list *standard-library* *core*)
     ;; This is where all the extra stack-yaml libs come from

     ;; This is what the library is designed to abstract from, namely
     ;; many common dependencies are here, you may have to jump around.
     :extra-deps (list (make-general-depencies *capability* *extensible*)
                       ,*eac-solver*)
     ;; This gives the path to the other projects, if you are in the
     ;; library folder then no need to change it from this default. If
     ;; you are in a nested folder then you'll need to give an extra set
     ;; of dots!
     :path-to-other "../"
     ;; This gives the extra bit of information for if we need any extra
     ;; text that stack allows
     :extra "allow-newer: true"))
#+end_src

If you wish to see what the file would look like before writing, run
the following

#+begin_src lisp
  (print-yaml *interaction-net-IR*)
#+end_src
Note if you make a new one, update =main.lisp= with the proper path to
the library and the new package you wish to export

Please note that variables need to be done in dependency order as they
are resolved immediately. So if there are mutually recursive packages,
you'll need to declare them before hand with just their name so it can
be processed as a local package

With all that said, Happy hacking!


